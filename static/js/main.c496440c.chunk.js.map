{"version":3,"sources":["components/Ticket/Ticket.js","components/Title/Title.js","components/Button/Button.js","components/UpcomingEvents/UpcomingEvents.js","redux/actions.js","redux/action.types.js","components/HotTickets/HotTickets.js","components/EventTicket/EventTicket.js","components/Header/Header.js","components/Footer/Footer.js","components/SearchBar/SearchBar.js","App.js","serviceWorker.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["Ticket","props","id","layout","className","href","address","src","imgSrc","alt","author","icon","faClipboard","height","faArrowsAltH","width","Title","title","Button","link","name","clickButton","addClassName","otherProps","onClick","UpcomingEvents","changeStyle","onListChange","this","list","children","Component","connect","state","dispatch","type","changed","HotTickets","onGridChange","grid","header","clicked","change","EventTicket","Header","Footer","text","SearchBar","onChange","placeholder","faSearch","App","imageSize","sortImagesInDomHandler","el","normalSort","changedSort","sort","a","b","parseFloat","changeImagesSortHandler","onChangeOrder","onFetchEvents","filteredHot","fromApi","slice","map","key","download_url","url","filter","toLowerCase","includes","search","filteredUpcoming","e","onSearchChange","axios","get","then","response","event","data","catch","error","console","log","trigger","searchHandler","target","value","Boolean","window","location","hostname","match","initialState","apiDataReducer","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c496440c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClipboard } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faArrowsAltH } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./Ticket.style.scss\";\r\n\r\n// ticket component for hot tickets section\r\nconst Ticket = props => {\r\n  return (\r\n    <div\r\n      id={props.id}\r\n      layout={props.layout}\r\n      className={props.layout === \"grid\" ? \"grid-view\" : \"list-view\"}\r\n    >\r\n      <a className=\"\" href={props.address}>\r\n        <img src={props.imgSrc} alt={props.author} />\r\n      </a>\r\n      <div className=\"bottomRow\">\r\n        <h4>{props.author}</h4>\r\n        <div className=\"heightContainer\">\r\n          <p>\r\n            <span className=\"iconTicket\">\r\n              <FontAwesomeIcon icon={faClipboard} />\r\n            </span>\r\n            Height: <span>{props.height}</span>\r\n          </p>\r\n        </div>\r\n        <div className=\"widthContaienr\">\r\n          <p>\r\n            <span className=\"iconTicket\">\r\n              <FontAwesomeIcon icon={faArrowsAltH} />\r\n            </span>\r\n            Width: <span>{props.width}</span>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ticket;\r\n","import React from \"react\";\r\nimport \"./Title.style.scss\";\r\n\r\nconst Title = props => (\r\n  <div>\r\n    <h1 className=\"title\">{props.title}</h1>\r\n  </div>\r\n);\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport \"./Button.style.scss\";\r\n\r\n// Custom button element where we add values as props\r\n\r\nconst Button = ({ link, name, clickButton, addClassName, ...otherProps }) => {\r\n  return (\r\n    <a href={link}>\r\n      <button onClick={clickButton} className={addClassName} {...otherProps}>\r\n        {name}\r\n      </button>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Title from \"../Title/Title\";\r\nimport Button from \"../Button/Button\";\r\n\r\nimport \"./UpcomingEvents.style.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { listChange } from \"../../redux/actions\";\r\n\r\nclass UpcomingEvents extends Component {\r\n  changeStyle = () => {\r\n    this.props.onListChange();\r\n  };\r\n  render() {\r\n    const header = \"Upcoming Events\";\r\n    return (\r\n      <div className=\"upcomingEventsContainer\">\r\n        <Title title={header} />\r\n        <Button\r\n          addClassName=\"changeGridButton\"\r\n          onClick={this.changeStyle}\r\n          name=\"Switch Grid\"\r\n        />\r\n        <div\r\n          className={\r\n            this.props.list\r\n              ? \"upcomingEventsImagesList\"\r\n              : \"upcomingEventsImagesGrid\"\r\n          }\r\n        >\r\n          {this.props.children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    list: state.list\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onListChange: () => dispatch(listChange())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpcomingEvents);\r\n","import {\r\n  FETCH_EVENTS,\r\n  CHANGE_ORDER,\r\n  SEARCH_HANDLER,\r\n  GRID_CHANGE,\r\n  LIST_CHANGE\r\n} from \"./action.types\";\r\nimport axios from \"axios\";\r\n\r\nexport const setEvent = event => {\r\n  return {\r\n    type: FETCH_EVENTS,\r\n    event: event\r\n  };\r\n};\r\n\r\nexport const fetchEvents = () => {\r\n  return dispatch => {\r\n    axios\r\n      .get(\"https://picsum.photos/v2/list\")\r\n      .then(response => {\r\n        dispatch(setEvent(response.data));\r\n      })\r\n      .catch(function(error) {\r\n        // handle error\r\n        console.log(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const changeOrder = trigger => {\r\n  return {\r\n    type: CHANGE_ORDER,\r\n    trigger: trigger\r\n  };\r\n};\r\n\r\nexport const searchHandler = e => {\r\n  return {\r\n    type: SEARCH_HANDLER,\r\n    e: e\r\n  };\r\n};\r\n\r\nexport const gridChange = change => {\r\n  return {\r\n    type: GRID_CHANGE,\r\n    change: change\r\n  };\r\n};\r\n\r\nexport const listChange = changed => {\r\n  return {\r\n    type: LIST_CHANGE,\r\n    changed: changed\r\n  };\r\n};\r\n","export const FETCH_EVENTS = \"FETCH_EVENTS\";\r\nexport const CHANGE_ORDER = \"CHANGE_ORDER\";\r\nexport const SEARCH_HANDLER = \"SEARCH_HANDLER\";\r\nexport const GRID_CHANGE = \"GRID_CHANGE\";\r\nexport const LIST_CHANGE = \"LIST_CHANGE\";\r\n","import React, { Component } from \"react\";\r\nimport \"./HotTickets.style.scss\";\r\n\r\nimport Button from \"../Button/Button\";\r\nimport Title from \"../Title/Title\";\r\nimport { connect } from \"react-redux\";\r\nimport { gridChange } from \"../../redux/actions\";\r\n\r\nclass HotTickets extends Component {\r\n  changeStyle = () => {\r\n    this.props.onGridChange();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.grid ? \"hotTicketsContainer\" : \"list\"}>\r\n        <Title title={this.props.header} />\r\n        <Button\r\n          onClick={this.changeStyle}\r\n          addClassName=\"changeGridButton\"\r\n          name=\"Switch Grid\"\r\n        />\r\n        <Button\r\n          onClick={this.props.clicked}\r\n          addClassName=\"bigSmallToggle\"\r\n          name=\"Big First/ Small First\"\r\n        />\r\n        <div\r\n          className={\r\n            this.props.grid ? \"hotTicketsImagesGrid\" : \"hotTicketsImagesList\"\r\n          }\r\n        >\r\n          {this.props.children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    grid: state.grid\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onGridChange: () => dispatch(gridChange())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HotTickets);\r\n","import React from \"react\";\r\nimport \"./EventTicket.style.scss\";\r\nimport Button from \"../Button/Button\";\r\n\r\n// Component for ticket in upcoming events section\r\nconst EventTicket = props => {\r\n  return (\r\n    <div id={props.id} className=\"eventTicketContainerList\">\r\n      <div className=\"imgDatesSection\">\r\n        <div className=\"imgEventContainer\">\r\n          <img src={props.imgSrc} alt={props.alt} />\r\n        </div>\r\n        <div className=\"eventTextSection\">\r\n          <div className=\"dateFirst\">\r\n            <p>February</p>\r\n            <span className=\"dayInMonth\">14</span>\r\n          </div>\r\n          <div className=\"moreDetails\">\r\n            <p className=\"hourlyTime\">Time 20:30</p>\r\n            <h4>{props.author}</h4>\r\n            <p className=\"dimensions\">\r\n              <span>Width: {props.height},</span>{\" \"}\r\n              <span>Height: {props.width}</span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Button\r\n        addClassName=\"changeGridButton\"\r\n        link={props.address}\r\n        name=\"Find Pics\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventTicket;\r\n","import React from \"react\";\r\nimport \"./Header.style.scss\";\r\n\r\nconst Header = props => {\r\n  return <div className=\"headerContainer\">{props.children}</div>;\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Footer.style.scss\";\r\n\r\nconst Footer = ({ text, link }) => {\r\n  return (\r\n    <div className=\"footerContainer\">\r\n      <p>\r\n        powered by{\" \"}\r\n        <span>\r\n          <a href={link}>{text}</a>\r\n        </span>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./SearchBar.style.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// input component for searching through page elements\r\n\r\nconst SearchBar = ({ changed }) => {\r\n  return (\r\n    <form className=\"formEl\">\r\n      <input\r\n        onChange={changed}\r\n        className=\"textField\"\r\n        type=\"text\"\r\n        placeholder=\"Search for artist, event, or venue\"\r\n      />\r\n      <button type=\"submit\" className=\"btn-top\">\r\n        <FontAwesomeIcon icon={faSearch} />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\nimport \"./App.style.scss\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\n\nimport Ticket from \"./components/Ticket/Ticket\";\nimport UpcomingEvents from \"./components/UpcomingEvents/UpcomingEvents\";\nimport HotTickets from \"./components/HotTickets/HotTickets\";\nimport EventTicket from \"./components/EventTicket/EventTicket\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport { fetchEvents, changeOrder, searchHandler } from \"./redux/actions\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onFetchEvents();\n  }\n\n  //function for calculating dimensions of the image\n  imageSize = (width, height) => {\n    return width + height;\n  };\n\n  // Handler for sorting images in the DOM\n  // Added to the button onClick trigger\n  sortImagesInDomHandler = el => {\n    if (!this.props.normalSort && this.props.changedSort) {\n      return el.sort((a, b) => parseFloat(b.props.id) - parseFloat(a.props.id));\n    } else if (!this.props.normalSort && !this.props.changedSort) {\n      return el.sort((a, b) => parseFloat(a.props.id) - parseFloat(b.props.id));\n    }\n  };\n\n  changeImagesSortHandler = () => {\n    this.props.onChangeOrder();\n  };\n\n  render() {\n    // variable for rendering six hot tickets\n    const hotTicketsGrid = this.props.fromApi.slice(1, 7).map(el => {\n      return (\n        <Ticket\n          id={this.imageSize(el.width, el.height)}\n          key={el.id}\n          layout={\"grid\"}\n          imgSrc={el.download_url}\n          author={el.author}\n          height={el.width}\n          width={el.height}\n          address={el.url}\n        />\n      );\n    });\n    // filtering DOM elements\n    const filteredHot = hotTicketsGrid.filter(name =>\n      name.props.author.toLowerCase().includes(this.props.search.toLowerCase())\n    );\n\n    // variable for rendering three events tickets\n    const upcomingEventsList = this.props.fromApi.slice(7, 10).map(el => {\n      return (\n        <EventTicket\n          id={this.imageSize(el.width, el.height)}\n          alt={el.author}\n          key={el.id}\n          imgSrc={el.download_url}\n          author={el.author}\n          height={el.width}\n          width={el.height}\n          address={el.url}\n        />\n      );\n    });\n    // filtering DOM elements\n    const filteredUpcoming = upcomingEventsList.filter(name =>\n      name.props.author.toLowerCase().includes(this.props.search.toLowerCase())\n    );\n\n    return (\n      <div>\n        <Header>\n          <SearchBar changed={e => this.props.onSearchChange(e)} />\n        </Header>\n        <div className=\"mainContainer\">\n          <HotTickets\n            clicked={this.changeImagesSortHandler}\n            header=\"Hot Tickets\"\n          >\n            {this.props.normalSort && !this.props.changedSort\n              ? filteredHot\n              : this.sortImagesInDomHandler(filteredHot)}\n          </HotTickets>\n          <UpcomingEvents clicked={this.changeImagesSortHandler}>\n            {this.props.normalSort && !this.props.changedSort\n              ? filteredUpcoming\n              : this.sortImagesInDomHandler(filteredUpcoming)}\n          </UpcomingEvents>\n        </div>\n        <Footer text=\"ticketmaster\" link=\"/\" />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    fromApi: state.fromApi,\n    normalSort: state.normalSort,\n    changedSort: state.changedSort,\n    search: state.search\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchEvents: () => dispatch(fetchEvents()),\n    onChangeOrder: () => dispatch(changeOrder()),\n    onSearchChange: e => dispatch(searchHandler(e.target.value))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App, axios);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  FETCH_EVENTS,\r\n  CHANGE_ORDER,\r\n  SEARCH_HANDLER,\r\n  GRID_CHANGE,\r\n  LIST_CHANGE\r\n} from \"./action.types\";\r\n\r\nconst initialState = {\r\n  fromApi: [],\r\n  normalSort: true,\r\n  changedSort: false,\r\n  search: \"\",\r\n  grid: true,\r\n  list: true\r\n};\r\n\r\nconst apiDataReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_EVENTS:\r\n      return {\r\n        ...state,\r\n        fromApi: [...action.event]\r\n      };\r\n    case CHANGE_ORDER:\r\n      return {\r\n        ...state,\r\n        normalSort: false,\r\n        changedSort: !state.changedSort\r\n      };\r\n    case SEARCH_HANDLER: {\r\n      return {\r\n        ...state,\r\n        search: action.e\r\n      };\r\n    }\r\n    case GRID_CHANGE: {\r\n      return {\r\n        ...state,\r\n        grid: !state.grid\r\n      };\r\n    }\r\n    case LIST_CHANGE: {\r\n      return {\r\n        ...state,\r\n        list: !state.list\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default apiDataReducer;\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport apiDataReducer from \"./rootReducer\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  apiDataReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\n\nReactDOM.render(\n    <Provider store={store}>\n            <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}